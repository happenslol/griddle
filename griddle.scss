$grid-gutter-width: 1em !default;
$grid-gutter-height: $grid-gutter-width !default;

@mixin grid-waffle(
    $cols,
    $gutter-width: $grid-gutter-width,
    $gutter-height: $grid-gutter-height,
) {
    display: flex;
    flex-wrap: wrap;

    > * {
        flex: 0 0 calc((100% / #{$cols}) - #{$gutter-width});
        margin: 0 calc(#{$gutter-width} / 2) #{$gutter-height} calc(#{$gutter-width} / 2);

        &:nth-child(#{$cols}n + 1) {
            margin-left: 0;
            flex: 0 0 calc((100% / #{$cols}) - (#{$gutter-width} / 2));
        }

        &:nth-child(#{$cols}n + #{$cols}) {
            margin-right: 0;
            flex: 0 0 calc((100% / #{$cols}) - (#{$gutter-width} / 2));
        }

        &:nth-last-child(#{$cols}) ~ * {
            margin-bottom: 0;
        }
    }
}

@function _griddle-escape-num($num) {
    $first: str-slice("#{$num}", 1, 1);
    $second: str-slice("#{$num}", 2, 2);

    @return "\\3#{$first} #{$second}";
}

$special-widths: (
    "33": "(100% / 3)",
    "66": "((100% / 3) * 2)",
);

@function _griddle-get-width($width-str) {
    @if map-has-key($special-widths, inspect($width-str)) {
        @return "#{map-get($special-widths, "#{$width-str}")}";
    } @else {
        @return "(100% / (#{100 / $width-str}))";
    }
}

@mixin _griddle-escape-class($num) {
    $escaped: _griddle-escape-num($num);
    
    > .#{$escaped} {
        @content;
    }
}

@mixin _griddle-first-last($gutter-width, $gutter-height, $width-str) {
    $width: _griddle-get-width($width-str);

    &.first {
        margin-left: 0;
        margin-bottom: $gutter-height;
        flex: 0 0 calc(#{$width} - (#{$gutter-width} / 2));
    }

    &.last {
        margin-right: 0;
        flex: 0 0 calc(#{$width} - (#{$gutter-width} / 2));
    }
}

@mixin grid-classes-with-gutter-dimensions($gutter-width, $gutter-height, $widths...) {
    display: flex;
    flex-wrap: wrap;

    > * {
        margin: 0 ($gutter-width / 2);
    }

    @each $width-str in $widths {
        @if $width-str == "100" {
            .\31 00 {
                flex: 0 0 calc(100% - #{$gutter-width});
                @include _griddle-first-last($gutter-width, $gutter-height, 100%);
            }

        } @else if $width-str == "0" {
            @warn "griddle: 0 is an invalid width!";

        } @else {
            @include _griddle-escape-class($width-str) {
                $width: _griddle-get-width($width-str);
                flex: 0 0 calc(#{$width} - #{$gutter-width});

                @include _griddle-first-last($gutter-width, $gutter-height, $width-str);
            }
        }
    }
}

// NOTE(happens): Parts taken from https://stackoverflow.com/a/42295154
// and https://stackoverflow.com/a/46805472
@function _griddle-split-row($str) {
    // Make sure it's actually a string
    $str: inspect($str);
    $result: ();

    // Consume the string and stop when it's gone
    @while str-length($str) > 0 {
        // We basically start "eating" spaces until we hit something
        @while str-index($str, " ") == 1 {
            $str: str-slice($str, 2);
        }

        // At this point we have something else, or the string is empty,
        // so we want to append everything until the next space or stop
        @if str-length($str) > 0 {
            $next-space: str-index($str, " ");
            @if $next-space == null {
                // Append the rest and remove the rest of the string
                $result: append($result, $str);
                $str: "";
            } @else {
                $value: str-slice($str, 1, $next-space - 1);
                $result: append($result, $value);

                // Remove what we just added from the string
                $str: str-slice($str, $next-space + 1);
            }
        }
    }

    @return $result;
}

@mixin grid-template-with-gutter-dimensions($gutter-width, $gutter-height, $rows...) {
    display: flex;
    flex-wrap: wrap;

    $counter: 0;

    @for $i from 1 through length($rows) {
        $row: unquote(nth($rows, $i));
        $cols: _griddle-split-row($row);

        @for $j from 1 through length($cols) {
            $col: nth($cols, $j);
            $counter: $counter + 1;

            > *:nth-child(#{$counter}) {
                $width: _griddle-get-width($col);
                margin: 0 calc(#{$gutter-width} / 2) #{$gutter-height} calc(#{$gutter-width} / 2);

                @if $j == 1 {
                    flex: 0 0 calc(#{$width} - (#{$gutter-width} / 2));
                    margin-left: 0;
                } @else if  $j == length($cols) {
                    flex: 0 0 calc(#{$width} - (#{$gutter-width} / 2));
                    margin-right: 0;
                } @else {
                    flex: 0 0 calc(#{$width} - #{$gutter-width});
                }

                @if $i == length($rows) {
                    margin-bottom: 0;
                }
            }
        }
    }
}

@mixin grid-classes($widths...) {
    @include grid-classes-with-gutter-dimensions(
        $grid-gutter-width,
        $grid-gutter-height,
        $widths...
    );
}

@mixin grid-template($rows...) {
    @include grid-template-with-gutter-dimensions(
        $grid-gutter-width,
        $grid-gutter-height,
        $rows...
    );
}
