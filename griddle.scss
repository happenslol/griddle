$grid-gutter-width: 1em !default;
$grid-gutter-height: $grid-gutter-width !default;

$grid-force-denom: null;

@mixin grid-waffle(
    $cols,
    $gutter-width: $grid-gutter-width,
    $gutter-height: $grid-gutter-height,
) {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-end;

    > * {
        flex: 0 0 calc((100% / #{$cols}) - #{$gutter-width});
        margin: 0 calc(#{$gutter-width} / 2) #{$gutter-height} calc(#{$gutter-width} / 2);

        &:nth-child(#{$cols}n + 1) {
            margin-left: 0;
        }

        &:nth-child(#{$cols}n + #{$cols}) {
            margin-right: 0;
        }

        &:nth-last-child(#{$cols}) ~ * {
            margin-bottom: 0;
        }
    }
}

@function _griddle-escape-num($num) {
    $first: str-slice("#{$num}", 1, 1);
    $second: str-slice("#{$num}", 2, 2);

    @return "\\3#{$first} #{$second}";
}

@mixin _griddle-escape-class($frac) {
    $frac: unquote($frac);
    $v: _griddle-check-valid-frac($frac);

    $sl-index: str-index($frac, "/");
    $num: str-slice($frac, 1, ($sl-index - 1));
    $denom: str-slice($frac, ($sl-index + 1));

    $escaped-num: _griddle-escape-num($num);
    
    > .#{$escaped-num}\/#{$denom} {
        @content;
    }
}

@mixin _griddle-first-last() {
    &.first {
        margin-left: 0;
    }

    &.last {
        margin-right: 0;
    }
}

@function _griddle-get-width($frac, $gutter-width) {
    $frac: unquote($frac);
    $v: _griddle-check-valid-frac($frac);
    @return calc(100% * (#{$frac}) - (#{$gutter-width} - #{$gutter-width} * (#{$frac})));
}

@function _griddle-check-valid-frac($frac) {
    $sl-index: str-index($frac, "/");

    @if $sl-index == null or $sl-index == 1 or $sl-index == str-length($frac) {
        @error "Not a valid fraction: `#{$frac}`";
    }

    $num: str-slice($frac, 1, ($sl-index - 1));
    $denom: str-slice($frac, ($sl-index + 1));

    @if $grid-force-denom != null and $denom != $grid-force-denom {
        @error "Not an allowed fraction: `#{$frac}`, only `n/#{$grid-force-denom}` is allowed";
    }

    @return 1;
}

@mixin grid-classes-with-gutter-dimensions($gutter-width, $gutter-height, $widths...) {
    display: flex;
    flex-wrap: wrap;
    align-items: flex-end;

    > * {
        margin: 0 ($gutter-width / 2);
    }

    > * + .first {
        margin-top: $gutter-height;
    }

    @each $width-str in $widths {
        @include _griddle-escape-class($width-str) {
            $width: _griddle-get-width($width-str, $gutter-width);
            flex: 0 0 $width;
            @include _griddle-first-last();
        }
    }
}

// NOTE(happens): Parts taken from https://stackoverflow.com/a/42295154
// and https://stackoverflow.com/a/46805472
@function _griddle-split-row($str) {
    $result: ();

    // Consume the string and stop when it's gone
    @while str-length($str) > 0 {
        // We basically start "eating" spaces until we hit something
        @while str-index($str, " ") == 1 {
            $str: str-slice($str, 2);
        }

        // At this point we have something else, or the string is empty,
        // so we want to append everything until the next space or stop
        @if str-length($str) > 0 {
            $next-space: str-index($str, " ");
            @if $next-space == null {
                // Append the rest and remove the rest of the string
                $result: append($result, $str);
                $str: "";
            } @else {
                $value: str-slice($str, 1, $next-space - 1);
                $result: append($result, $value);

                // Remove what we just added from the string
                $str: str-slice($str, $next-space + 1);
            }
        }
    }

    @return $result;
}

@mixin grid-template-with-gutter-dimensions($gutter-width, $gutter-height, $rows...) {
    display: flex;
    flex-wrap: wrap;

    $counter: 0;

    @for $i from 1 through length($rows) {
        $row: nth($rows, $i);
        $cols: _griddle-split-row($row);

        @for $j from 1 through length($cols) {
            $col: nth($cols, $j);
            $counter: $counter + 1;

            > *:nth-child(#{$counter}) {
                margin: 0 calc(#{$gutter-width} / 2) #{$gutter-height} calc(#{$gutter-width} / 2);
                $width: _griddle-get-width($col, $gutter-width);
                flex: 0 0 $width;

                @if $j == 1 {
                    margin-left: 0;
                } @else if  $j == length($cols) {
                    margin-right: 0;
                }

                @if $i == length($rows) {
                    margin-bottom: 0;
                }
            }
        }
    }
}

@mixin grid-classes($widths...) {
    @include grid-classes-with-gutter-dimensions(
        $grid-gutter-width,
        $grid-gutter-height,
        $widths...
    );
}

@mixin grid-template($rows...) {
    @include grid-template-with-gutter-dimensions(
        $grid-gutter-width,
        $grid-gutter-height,
        $rows...
    );
}
